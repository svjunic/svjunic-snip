# ******************************************
# oirano snippet
# 徐々に直していく

# ******************************************
# ES5,ES6 snippet **************************
snippet class1
/**
 * ${1:html_overview}
 * @class
 * @classdesc ${2:description}
 */
export default class $2 {
  /** @constructs */
  constructor (){
    ${0}
  }
}

snippet class2
/**
 * ${1:html_overview}
 * @class
 * @classdesc ${2:description}
 * @extends ${3:extends_class}
 */
export default class $2 extends $3 {
  /**
   * コンストラクタ
   * @constructs
   * @param {${4:variable}} ${5:variableName} ${6:variableDiscription}
   */
  constructor ($5){
    super();
    ${0}
  }
}

# export
snippet export_es2015_1
export ${1:variable or func or etc..};

snippet export_es2015_2
export {${1:variable or func or etc..}};

snippet export_default_es2015_1
export default ${1:variable or func or etc..};

snippet export_default_es2015_2
export default {${1:variable or func or etc..}};

snippet public_method
/**
 * ${1:method_overview}
 * ${2:@param, @return}
 */
${4:method_name} (${5:param}){
  ${0}
}

snippet handle_method
/**
 * ${1:method_overview}
 * @param {Event} e イベントオブジェクト
 */
handle${2:method_name} (e){
  ${0}
}

snippet static_method
/**
 * ${1:method_overview}
 * ${2:@param, @return}
 */
static $4 (${5:param}){
  ${0}
}

# function
snippet func_es2015
function ${1:functionName}(${2:variable or variable=defaultValue}): ${3:return} {
  ${0}
}

## これいらんかも
snippet func_es2015_2
function ${1:functionName}({${2:variable}}): ${3:return} {
  ${0}
}

# generics
snippet func_generics
function ${1:functionName}<T>(${3:variable}:T}) {
  ${0}
}

snippet func_generics2
interface $2 {
  ${5}
}
function ${1:functionName}<T extends ${2:interfaceName},U keyof T>(${3:variable}:T, ${4:keyName}:U ) {
  // return obj[$4]
  ${0}
}

# arrow function
snippet func_arrow1
(${1:VariableData}) => {
  ${0}
}

snippet func_async1
async ()=>{
	${0}
};

snippet func_async2
const ${1} = async ()=>{
	${0}
};

# getter
snippet get-normal
get ${1:methodName} (){
  ${0}
}

snippet get-static
/**
 * ${1:method_overview}
 */
static get ${3:methodName} (${4:param}){
  ${0}
}

# setter
snippet set-normal
set ${3:MethodName} (${4:param}){
  ${0}
}

snippet set-static
/**
 * ${1:method_overview}
 * ${2:@param, @return}
 */
static set ${3:methodName} (${4:param}){
  ${0}
}

# import
snippet import_es2015_1
import ${2:variable} from '${1:module}';
${0}

snippet import_es2015_2
import * as name from '${1:module}';
${0}

# dynamic import
snippet import_dynamic_1_webpack
const { default: ${1:name} } = await import( /* webpackChunkName: "${2:/js/index.moge.js}" */ '${2:shared/components/moge.js}' );

snippet import_dynamic_1
const ${1:module} = await import( '${2:shared/components/moge.js}' );

# snippet import_dynamic_2

# console and debugger
snippet cl
console.log(${1:object});

snippet cl2
console.log('${1:string}');

snippet cl3
console.log(`${1} : ${${2:string}}`);

snippet ci
console.info(${1:object});

snippet ce
console.error(${1:object});

snippet ct
console.table(${1:object});

snippet clg
console.group(${1:object});
${2:script}
console.groupEnd($1);

snippet console.groupCollapsed
console.groupCollapsed(${1:object});
${2:script}
console.groupEnd($1);

snippet de
debugger;

# statements
snippet let1
let ${1} = ${2:'$1'};

snippet let2
let [${1}] = [${2:'$1'}];

snippet const1
const ${1} = ${2:'$1'};

snippet const2
const [${1}] = [${2:'$1'}];

# promise
snippet promise1_fullset
${1:PromiseName} = new Promise(function(resolve, reject){
  resolve(${2:VariableData}); 
});

$1.then(function(data) {
  ${3:done}
})
.catch(function(reason) {
  ${4:error or reject}
});

snippet promise2_promise_only
${1:PromiseName} = new Promise(function(resolve, reject){
  resolve(${2:VariableData}); 
});

snippet promise_all
Promise.all(${1:PromiseName}).then(function(value) {
  ${2:done}
})
.catch(function(reason) {
  ${3:error or reject}
});

snippet promise_race
Promise.race(${1:PromiseName}).then(function(value) {
  ${2:script}
});

snippet await_promise_scripting_delay
 await new Promise(function(resolve) {
   setTimeout(() => {
     resolve();
   }, ${1});
 });
 ${0}

snippet map1
map( function ( value, key, object ) {
  return ${2:script}
});
${0}

snippet filter
filter( function ( value, key, object ) {
  return ${2:script}
})
${0}

snippet unique
filter(function (x, i, self) {
  return self.indexOf(x) === i;
})
${0}

snippet isArray
Array.isArray( ${1:variable} )
${0}

# generator
snippet gen_function1
function* ${1}($2) {
  yield ${3};
}
let ${4:generatorName} = $1();

snippet gen_function2_while_sample
function* ${1}($2) {
  let i = 1;
  let num = 1;
  while (true) {
    num += i
    yield num
  }
}
let ${3:generatorName} = $1();

snippet next
${1:generatorName}.next()

# querySelector
snippet querySelector
${1:rootDom}.querySelector('${2:selector}');
${0}

snippet querySelectorAll
${1:rootDom}.querySelectorAll('${2:selector}');
${0}

snippet querySelectorAllEach
Array.prototype.forEach.call(${1:rootDom}.querySelectorAll('${2:selector}'),()=>{
  ${0}
});

# fetch
snippet fetch
fetch('${1:url}').then( res=>{
  console.log( res );
  ${0}
}).catch( err =>{
  console.log(err);
});

snippet fetchFull
fetch('${1:url}',{
  method: '${2:get or post}',
  headers: {
    'content-type': 'application/json',
    ${2:header}
  },
  body: JSON.stringify(${3:request body}),
  credentials: '${3:include, same-origin, omit}',
  chache: '${4:default, bypass, reload, revalidate, force-cache, offline}'
}).then(res => {
   console.log(res.url, res.type, res.status);
   if(res.headers.get('content-type') === 'application/json') {
     res.json().then(json => console.log(json));
    ${0}
   } else {
     // res.arrayBuffer();
     // res.blob();
     res.text().then(text => console.log(text));
   }
}).catch(err => console.error(err));

# object forEach
snippet object_each
Object.keys(${1:object}).forEach((key)=>{
    ${0} = $1[key]}
});
endsnippet

# before/after

snippet before "text"
insertAdjacentHTML('beforebegin', ${0:string});
endsnippet

snippet before1 "node"
insertAdjacentElement('beforebegin', ${0:node});
endsnippet

snippet before2 "node or string (IE:x)"
before(${0:node or string});
endsnippet

snippet after1 "text"
insertAdjacentHTML('afterend', ${0:string});
endsnippet

snippet after2 "node"
insertAdjacentElement('afterend', ${0:node});
endsnippet

snippet after "node or string (IE:x)"
after(${0:node or string});
endsnippet

snippet contains
el !== ${1:childElmenet} && el.contains($1)${0}

snippet parseHTML
let parseHTML = function(str) {
  let tmp = document.implementation.createHTMLDocument();
  tmp.body.innerHTML = str;
  return tmp.body.children;
};
parseHTML(${0});

snippet setTimeout1
setTimeout( ()=>{
  ${2}
},${1});
${0}

snippet setTimeout2
setTimeout( function(){
  ${2}
},${1});
${0}

snippet settimeout1-return
const timeid = setTimeout( ()=>{
  ${2}
},${1});
${0}

snippet settimeout2-return
const timeid = setTimeout( function(){
  ${2}
},${1});
${0}

# ******************************************
# ESLint ***********************************
snippet eslint-disable
/* eslint-disable */

snippet eslint-enable
/* eslint-enable */

snippet eslint-disable-line
// eslint-disable-line

snippet eslint-disable-next-line
// eslint-disable-next-line

snippet eslint-debugger
debugger; // eslint-disable-line

snippet eslint-specifying-variable
/* global ${1: var1, var2, var3:writable, var4:readonly, ...} */

# react-hooks
snippet eslint-disable-react-hooks-exhaustive-deps
// eslint-disable-next-line react-hooks/exhaustive-deps

# ******************************************
# prettier ***********************************
snippet prettier-ignore
/* prettier-ignore */

snippet prettier-ignore-start
/* prettier-ignore-start */

snippet prettier-ignore-end
/* prettier-ignore-end */


# ******************************************
# javascript snippet(browser ) *************
# width
snippet ww
// 画面幅
var ${1:screenWidth} = screen.width;

snippet www
// 有効画面幅
var ${1:screenAvailWidth} = screen.availWidth;

snippet wwww
// 表示領域幅
var ${1:windowInnerWidth} = window.innerWidth;

snippet wwwww
// ウィンドウ幅
var ${1:windowOuterWidth} = window.outerWidth;

snippet wwwwww
// 表示領域幅
var ${1:clientWidth} = document.documentElement.clientWidth;

snippet jw
// 表示領域幅
var ${1:windowWidth} = $(window).width();

snippet jww
// ドキュメント幅
var ${1:documentWidth} = $(document).width();

snippet hh
// 画面高
var ${1:screenHeight} = screen.height;

snippet hhh
// 有効画面高
var ${1:screenAvailHeight} = screen.availHeight;

snippet hhhh
// 表示領域高
var ${1:windowInnerHeight} = window.innerHeight;

snippet hhhhh
// ウィンドウ高
var ${1:windowOuterHeight} = window.outerHeight;

snippet hhhhhh
// 表示領域高
var ${1:clientHeight} = document.documentElement.clientHeight;


snippet jh
// 表示領域高
var ${1:windowHeight} = $(window).height();

snippet jhh
// ドキュメント高
var ${1:documentHeight} = $(document).height();

# Math
snippet Mathf(切り捨て）
Math.floor(${1:Number})

snippet Mathc(切り上げ)
Math.ceil(${1:Number})

snippet Mathr(四捨五入)
Math.round(${1:Number})

snippet Matha(絶対値)
Math.abs(${1:Number})

# function
snippet func(callback)
function(${1:variable or variable=defaultValue}) {
${2:script}
});

snippet func(closure)
(function( window, document ) {
${1:script}
})( window, document );

snippet func(closure_jquery)
(function( window, document, $ ) {
${1:script}
})( window, document, jQuery );

# native function
snippet forEach
${1:name}.forEach(function(${2:name} ,index,arr){
${3:$script}
});

# native function
snippet some
${1:name}.some(function(${2:name} ,index,arr){
${3:$script}
});

snippet objectKeys
Object.keys(${1:ObjectName}).forEach(function(key,value){
${3:$script}
});

snippet regexpHankakuNumber1
/^\d*$/

snippet regexpHankakuNumber2
/^\d+$/

snippet regexpHankakuAlphabet1
/^[a-zA-Z]*$/

snippet regexpHankakuAlphabet2
/^[a-zA-Z]+$/

snippet regexpHankakuEiSu1
/^[0-9a-zA-Z]*$/

snippet regexpHankakuEiSu2
/^[a-zA-Z0-9!-/:-@¥[-\`{-~]*$/

snippet regexpHankakuLengthX1
/^([a-zA-Z0-9]{${1:number},})$/

snippet regexpHankakuLengthX2
/^([a-zA-Z0-9]{${1:number},${2:number}})$/

snippet regexpNumberLengthX1
/^(\d{0,8})$/

snippet regexpNumberLengthX2
/^\d{8}$/

snippet regexpURL
/^https?:\/\/

snippet regexpPostalCode
/^\d{3}-\d{4}$/

snippet regexpIP
/^\d{1,3}(\.\d{1,3}){3}$/

snippet regexpZenkakuHira
/^[ぁ-んー]*$/

snippet regexpZenkakuKana
/^[ァ-ンヴー]*$/

snippet regexpZenkaku
/^[^\x20-\x7e]*$/




# ******************************************
# javascript snippet(util) *****************
# utility
snippet vthi
var _this = this;

snippet vtha
var _that = this;

snippet vself
var self = this;

snippet isIE
var isIE = (window.navigator.appVersion.match(/MSIE/) || window.navigator.appVersion.match(/Trident/))? true : false;

snippet isIE6
var isIE6 = (window.navigator.appVersion.toLowerCase().indexOf('msie 6.') !== -1)? true : false;

snippet isIE7
var isIE7 = (window.navigator.appVersion.toLowerCase().indexOf('msie 7.') !== -1)? true : false;

snippet isIE8
var isIE8 = (window.navigator.appVersion.toLowerCase().indexOf('msie 8.') !== -1)? true : false;

snippet isIE9
var isIE9 = (window.navigator.appVersion.toLowerCase().indexOf('msie 9.') !== -1)? true : false;

snippet isIE10
var isIE10 = (window.navigator.appVersion.toLowerCase().indexOf('msie 10.') !== -1)? true : false;

snippet isIE11
var isIE11 = (function(){
var appVersion = window.navigator.appVersion;
var isIE = (appVersion.match(/MSIE/) || appVersion.match(/Trident/))? true : false;
var hasRv = (window.navigator.appVersion.toLowerCase().indexOf('rv:11') !== -1)? true : false;
return (isIE && hasRv);
})();

snippet isAndroid
var isAndroid = (/Android/.test(window.navigator.userAgent) && !/Windows Phone/.test(window.navigator.userAgent));

snippet isAndroid2
var isAndroid2 = /Android 2/.test(window.navigator.userAgent);

snippet isAndroid4
var isAndroid4, isAndroid4Default, isAndroid4Chrome;
isAndroid4    = false;
isAndroid4Default = false;
isAndroid4Chrome  = false;
isAndroid4 = /Android 4/.test(window.navigator.userAgent);
if(isAndroid4 && /Android 4.*Version/.test(window.navigator.userAgent)){
isAndroid4Default = true;
} else {
isAndroid4Chrome = true;
}

snippet isIOS
var isIOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);

snippet gtm
dataLayer.push({
'event':'gaTrackEvent',
'gaCategory': '${1:gaCategoryName}',
'gaAction': '${2:gaAction}',
'gaLabel' : '${3:gaLabel}',
'eventTimeout': '${4:time}',
'eventCallback': '${5:function}',
});

# インスタンス生成用の仮想クラス
snippet old_class
${1:ClassName}.create = function () {

var app = {
  ${2:MemberName} : this.${3:VariableData}
};

app.initialize = function () {
  ${3:script}
};

return app;
};

# format
snippet funcZeroPadding
/**
 * 0詰めフォーマット
 * @param  {Number} num  number or string
 * @param  {Number} n  number of characters
 * @return {String} (In an error, 'false' is returned. )
 */

export interface IZeroPadding {
  num: string | number;
  minimamDisit: number;
}

export default ({ num, minimamDisit }: IZeroPadding) => {
  let result;
  switch (typeof num) {
    case 'string':
      result = num;
      break;
    case 'number':
      result = num.toString();
      break;
    default:
      return false;
  }
  while (result.length < minimamDisit) {
    result = '0' + result;
  }
  return result;
};

# NumberDelimitter
snippet funcNumberDelimiter
/**
  * 価格の区切り文字を挿入したstringを返す
  * @param {Number} num 数値（interger）
  */
function numberDelimiter(num) {
  // ES2018 まだ早い
  //return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  return num.toLocaleString('ja-JP')
}

# fragment
snippet fragment
  const _fragment = document.createDocumentFragment();

  for(let cnt=0, max=${1:variable}.length; cnt<max; cnt++ ){
      const item = document.createElement('${2:tagname}');
      const text = document.createTextNode('${3:string}');
      item.appendChild(song);
      fragment.appendChild(item); // fragmentの追加する
  }

  ${4:element}.appendChild(fragment);
  ${0}

snippet xmlhttp
var xhr = new XMLHttpRequest();

// ハンドラの登録.
xhr.onreadystatechange = function() {
  switch ( xhr.readyState ) {
    case 0:
      // 未初期化状態.
      console.log( 'uninitialized!' );
      break;
    case 1: // データ送信中.
      console.log( 'loading...' );
      break;
    case 2: // 応答待ち.
      console.log( 'loaded.' );
      break;
    case 3: // データ受信中.
      console.log( 'interactive... '+xhr.responseText.length+' bytes.' );
      break;
    case 4: // データ受信完了.
      if( xhr.status == 200 || xhr.status == 304 ) {
        var data = xhr.responseText; // responseXML もあり
        console.log( 'COMPLETE! :'+data );
      } else {
        console.log( 'Failed. HttpStatus: '+xhr.statusText );
      }
      break;
  }
};

xhr.open( 'POST', 'http://{送信先URL}/post.php', false );
// POST 送信の場合は Content-Type は固定.
xhr.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );
// 
xhr.send( 'hoge=piyo&moge=fuga' );
xhr.abort(); // 再利用する際にも abort() しないと再利用できないらしい.





# ******************************************
# lodash and undersocre snippet ************

# CreateURL
snippet _for
_.forEach( ${1:object}, function ( ${2:value}, key, object ) {
  ${3:script}
});

snippet _filter
_.filter( ${1:object}, function ( value, key, object ) {
  return ${2:script}
});

snippet _map
_.map( ${1:object}, function ( value, key, object ) {
  return ${2:script}
});

snippet _URL
this.BASE_URL = '${1:mydomain.com/url}';
this.BASE_OPTION = {
  ${2:key} : '${3:value}'
};

this.url = this.BASE_URL + '?';

var delimiter = '';
_.forEach( this.BASE_OPTION, function ( value, key, arr ) {
  _this.url += delimiter + key + '=' + value;
  delimiter = '&';
});

this.$tmp = _.template( ${4:jQuery Object} );


# ******************************************
# Vue  *************************************
snippet vue_orthodox
export default function(store, _root) {
  new Vue({
    el: _root,
    data: {
      input: null,
    },

    //インスタンスの生成前に実行, this.dataとかもない
    beforeCreate: function() {
      //console.log('beforeCreate');
    },

    //インスタンスが作成された後で実行, this.$elとかはない
    created: function() {
      //console.log('created, ');
    },

    //elementへのマウント前に実行, this.$elはない
    beforeMount: function() {
      //console.log('beforeMount');
    },

    //elementへのマウントがされた後で実行, this.$elがある
    // - 子コンポーネント全てをマウントしたことは保証されない
    // - サーバサイドレンダリング（SSR）ではうごかない
    mounted: function() {
      //console.log('mounted');
    },

    //データの更新があった時に、rerenderされる前に実行
    beforeUpdate: function() {
      //console.log('beforeUpdate');
    },

    //データの更新があった時に、rerenderされた後に実行
    updated: function() {
      //console.log('updated');
    },

    //$destroy()が呼ばれた後、インスタンスが削除される前に実行
    beforeDestroy: function() {
      //console.log('beforeDestroy');
    },

    //$destroy()が呼ばれた後、インスタンスが削除された後に実行
    destroyed: function() {
      //console.log('destroyed');
    },

    /****************
     * other
     ****************/
    computed: {},
    methods: {
      //onMouseenter: function() {
      //  console.log('mouseenter');
      //  this.mogeta()
      //},
      //mogeta: function() {
      //  console.log('mogeta!');
      //}
    }
  });
}

# ******************************************
# vuex
# ******************************************
snippet initialVuex
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

const state = {
  isStarted: false,
};

const getters = {
  hoge(state) {
    return state.isStarted;
  }
};

const actions = {
  async loadJson({ state, commit, dispatch }) {
		// 非同期処理
    //commit('setIsStarted', payload);
    commit('setIsStarted', payload);
  },

  setIsStarted({ commit }, payload) {
    commit('isStarted', payload);
  }
};

const mutations = {
  setIsStarted(state, payload) {
    state.isStarted = Boolean(payload);
  }
};

export default new Vuex.Store({
  state,
  getters,
  actions,
  mutations
});

snippet initialVuex_module
const store = new Vuex.Store({
  modules: {
    a: moduleA,
    b: moduleB
  }
})




# ******************************************
# JSDOC ************************************

# file
snippet doc_file-full
/**
 * @file ${1:overview_html}
 * @author ${2:author}
 * @version ${3:version}
 */

# class
snippet doc_class
/**
 * ${1:overview_html}
 * @class
 * @param {${2:type}} ${3:name} ${4:discription}
 */

# member
snippet doc_member
/**
 * ${1:overview_html}
 * @member {${2:type}}
 */

# constructor
snippet doc_constructor
@constructs

# method
snippet doc_method
/**
 * ${1:overview_html}
 *
 * @param {${2:type}} ${3:name} ${4:discription}
 * @return {${5:type}} ${6:name} ${7:discription}
 * @example
 * ${7:example}
 * tiger.toString('：');
 * 出力：「虎太郎：オス」
 */

# method
snippet doc_type
/**
 * ${1:overview_html}
 * @type {${2:type}}
 */

# method function
snippet doc_function
/**
 * ${1:note}
 * @param {${2:type}} ${3:name} ${4:detail}
 */

# jsdoc util
## file
snippet doc_file
@file ${1:name}

## fire
snippet doc_fire
@fire ${1:className}#${1:Event}

## author
snippet doc_a
@author ${1:name}

## class
snippet doc_c
@class ${1:name}

## version
snippet doc_v
@version ${1:version}

## callback
snippet doc_cb
@callback {Boolean} ${1:name} ${2:discription}

## param
snippet doc_pb
@param {Boolean} ${1:name} ${2:discription}

snippet doc_pn
@param {Number} ${1:name} ${2:discription}

snippet doc_ps
@param {String} ${1:name} ${2:discription}

# ******************************************
# Types ************************************
# type
snippet type
type ${1:name or name<T>} = ${2:typeName,typeName<T>} | ${3:typeName,typeName<T>}

# interface
snippet interface
declare interface I${1:name} {
	${2:propaties}
}

snippet interfaceProps
declare interface I${1:name}Props {
	${2:propaties}
}

snippet interfaceT
declare interface I${1:name}<T> {
	${2:propaties}
}

snippet einterface
export interface I${1:name} {
	${2:propaties}
}

snippet einterfaceProps
export interface I${1:name}Props {
	${2:propaties}
}

snippet einterfaceT
export interface I${1:name}<T> {
	${2:propaties}
}

# declare
snippet declare
declare const ${1:variableName}: never;

# enum
snippet enum
export enum ${1}{
  ${2:name}= '${3:value}',
}

# ******************************************
# React ************************************
## state
snippet constUseState
const [${1:state},${2:setState}] = useState(${3:initial value})

## context
snippet createContext
export const ${1:ContextName}Context = createContext(${2:defaultValue});

snippet constUseContext
const ${1:variable} = useContext(${2:ContextName})

## useEffect
snippet useEffect1_react-app
useEffect( ()=>{
  ${1:script}
  // eslint-disable-next-line react-app/react-hooks/exhaustive-deps
}, [$2]);

snippet useEffect1_react-hook
useEffect( ()=>{
  ${1:script}
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, [$2]);

snippet useEffect2
useEffect( ()=>{
  ${1:script}
}, [$0]);

## useReducer
snippet constUseReducer
const [${1:state}, $1Dispatch] = useReducer(${2:ReducerName}, ${3:initialState});

snippet reducer
const ${1:ReducerName}Reducer = (state, action) => {
  ${2:script}
};

## useCallback
snippet constUseCallback1
const ${1:name}Callback = useCallback(()=>{
  ${3:script}
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, [$2]);

snippet constUseCallback2
const ${1:name}Callback = useCallback(()=>{
  ${3:script}
}, [$2]);

## useRef
snippet constUseRef
const ${1:name}Ref = useRef(null);

## functional component
snippet initialFunctionalComponent
import React from "react";

export interface `expand("%:t:r")`Props {
	${1:types}
}

const `expand("%:t:r")`: React.FC<`expand("%:t:r")`Props> = props => {
	${4:script}
	return (
  	<${2:wrapTag}>
		  ${3:html}
  	</$2>
	)
};

export default `expand("%:t:r")`;

snippet initialFunctionalComponentNoProps
import React from "react";

const `expand("%:t:r")`: React.FC = () => {
	${4:script}
	return (
  	<${2:wrapTag}>
		  ${3:html}
  	</$2>
	)
};

export default `expand("%:t:r")`;

snippet customHook
import { useState } from "react";

function `expand("%:t:r")`() {
	const [${1:state},${2:setState}] = useState(${3:initial value})

  const bind = {
	  $1,
	  onChange: (e)=> {
	 	  $2(e.target.value)
	  }
	}

	return [$1, bind];
	// return [$1, bind, ...];
};

export default `expand("%:t:r")`;

## Global Context
snippet globalContext
interface I${1:name}State {
	${2:propaties}
}

export const $1ActionType = {
  ${3:variableName}= '$3',
};
type $1ActionType = typeof $1ActionType[keyof typeof $1ActionType];

const initialState :I$1State = {
	${4:propaties}
};

const StoreContext = createContext(initialState);

const reducer = (state, action) => {
  switch (action.type) {
    case $1ActionType.$3:
      return {$1};
			// return {...state, $propatyName: $value}
      // return { hogehoge: 'hogehogehoge' }
      break;
    default:
      return state;
      break;
  }
};

const Provider = ({children}) => {
  const [state, dispatch] = useReducer(reducer, initialState)
  return <Store.Provider value={{state, dispatch}}>{children}</Store.Provider>
}

export { Store, Provider }

## reducerのaction.type用の宣言
snippet ActionTypeConst
export const ${1}ActionType = {
  ${2}
};
type ${1}ActionType = typeof ${1}ActionType[keyof typeof ${1}ActionType];

snippet ActionTypeEum
export enum ${1}ActionType {
  ${2:name}= '${3:value}',
}

## html
snippet ref
ref={${1:name}}

snippet value
value={${1:name}}

snippet onClick1
onClick={handle${1:function}}

snippet onClick2
onClick={(e) => ${1:script}}

snippet onSubmit1
onSubmit={handle${1:function}}

snippet onSubmit2
onSubmit={(e) => ${1:script}}

snippet onChange1
onChange={handle${1:function}}

snippet onChange2 
onChange={(e) => ${1:script}}

### Context HTML
snippet provider
<${1:Context}.Provider value={${2:variable}}>
  ${0}
</$1.Provider>

snippet consumer
<${1:Context}.Consumer>
  ${0}
</$1.Consumer>


# ******************************************
# react-redux ******************************

snippet initialContainerComponent
import { Action } from 'typescript-fsa';

import { AppState } from '~/store.ts';
import {${2:action}} from '{${1:aciton.ts}}';
import { Dispatch } from 'redux';
import { connect } from 'react-redux';
import ${4:component} from '${3:component.ts}';

export interface I$4Handler {
  // setText: (text: string) => Action<string>;
}

export const mapStateToProps = (appState: AppState) => {
  return {
    //text: appState.TestReducer.text,
  };
};

export const mapDispatchToProps = (dispatch: Dispatch<Action<string>>) => {
  return {
    //setText: (text: string) => dispatch(setText(text)),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)($4);

snippet initialAction
import actionCreatorFactory from 'typescript-fsa';

const actionCreator = actionCreatorFactory();

// export const init = actionCreator('INIT');
// export const setText = actionCreator<string>('SET_TEXT');

snippet initialReducer
import { reducerWithInitialState } from 'typescript-fsa-reducers';

import {${2:action}} from '${1:action.ts}';

//ここにstateの初期値を書く
export const initialState: ${3} = {
  //text: 'first impression',
};

export const TestReducer = reducerWithInitialState(initialState);
  //.case(
  //  init,
  //  (state, payload): ITestState => {
  //    return initialState;
  //  }
  //)
  //.case(setText, (state, payload) => {
  //  return { ...state, text: payload };
  //});
