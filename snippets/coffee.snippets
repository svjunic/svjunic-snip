# ******************************************
# oirano snippet

# ******************************************
# JSDOC ************************************

# file doc
snippet @@file
  ###
  @fileOverview ${1:overview_html}
  
  @author ${2:author}
  @version ${3:version}
  ###

# class doc
snippet @@class
  ###
  ${1:overview_html}
  
  @class ${2:discription}
  
  @param {${3:type}} ${4:name} ${5:discription}
  ###

# member doc
snippet @@member
  ###
  ${1:overview_html}
  @member {${2:type}}
  ###

# method doc
snippet @@method
  ###
  ${1:overview_html}
  
  @param {${2:type}} ${3:name} ${4:discription}
  @param {String} sep 分割表示用マーク
  @return {String} 表示用文章
  
  @example
  tiger.toString("：");
  出力：「虎太郎：オス」
  ###

# jsdoc util
## file
snippet @@f
  @file ${1:name}

## fileOverview
snippet @@fo
  @fileOverview ${1:name}

## author
snippet @@a
  @author ${1:name}

## class
snippet @@c
  @class ${1:name}

## version
snippet @@v
  @version ${1:version}

## callback
snippet @@c
  @callback {Boolean} ${1:name} ${2:discription}

## param
snippet @@pb
  @param {Boolean} ${1:name} ${2:discription}

snippet @@pn
  @param {Number} ${1:name} ${2:discription}

snippet @@ps
  @param {String} ${1:name} ${2:discription}

snippet @@po
  @param {Object} ${1:name} ${2:discription}

## return
snippet @@rb
  @return {Boolean} ${1:name} ${2:discription}

snippet @@rn
  @return {Number} ${1:name} ${2:discription}

snippet @@rs
  @return {String} ${1:name} ${2:discription}

snippet @@ro
  @return {Object} ${1:name} ${2:discription}


# ******************************************
# javascript snippet ************************

# class（coffee共通用）
snippet class
  class ${1:ClassName} extends ${2:SuperClassName}
  # Static variables
  @${3:VariableName} = ${4:VariableData}
   
  # fields
  _${5:FieldVariableName} = ${6:FieldVariableData}
   
  # constructor
  constructor: (args)->
    _${7:VariableName} = ${8:VariableData}
   
  # private methods
  ${9:PrivateFunctionName} = (${10:args})->
    return


# class(クロージャ。Singleton向け)
snippet class
  ${1:ClassName}.create = ()->

  app =
    ${5:MemberName} : this.${6:VariableData}

  app.initialize = ()->
    ${7:script}
    return

  return @


# getter
snippet get
  get${1:VariableName}()->
  return @${2:VariableName}

# setter
snippet set
  set${1:VariableName}(${2:VariableName})->
  @${3:VariableName} = ${4:VariableName}
  return

# width
snippet ww
  # 画面幅
  ${1:screenWidth} = screen.width;

snippet www
  # 有効画面幅
  ${1:screenAvailWidth} = screen.availWidth;

snippet wwww
  # 表示領域幅
  ${1:windowInnerWidth} = window.innerWidth;

snippet wwwww
  # ウィンドウ幅
  ${1:windowOuterWidth} = window.outerWidth;

snippet wwwwww
  # 表示領域幅
  ${1:clientWidth} = document.documentElement.clientWidth;

snippet jw
  # 表示領域幅
  ${1:windowWidth} = $(window).width();

snippet jww
  # ドキュメント幅
  ${1:documentWidth} = $(document).width();

snippet hh
  # 画面高
  ${1:screenHeight} = screen.height;

snippet hhh
  # 有効画面高
  ${1:screenAvailHeight} = screen.availHeight;

snippet hhhh
  # 表示領域高
  ${1:windowInnerHeight} = window.innerHeight;

snippet hhhhh
  # ウィンドウ高
  ${1:windowOuterHeight} = window.outerHeight;

snippet hhhhhh
  # 表示領域高
  ${1:clientHeight} = document.documentElement.clientHeight;


snippet jh
  # 表示領域高
  ${1:windowHeight} = $(window).height();

snippet jhh
  # ドキュメント高
  ${1:documentHeight} = $(document).height();

# Math
snippet Mf
  Math.floor(${1:切り捨てる Number})

snippet Mc
  Math.ceil(${1:切り上げ Number})

snippet Mr
  Math.round(${1:四捨五入 Number})

snippet Ma
  Math.abs(${1:絶対値 Number})

# function
snippet func
   ((window, document, $) ->
   ${1:script}
   return
   ) window, document, jQuery 

# utility
snippet con
  console.log ${1:VariableName}


# ******************************************
# jQuery snippet ***************************

#ajax
snippet ajaxo
  ajaxOptions = 
    url    : '${1:mydomain.com/url}',
    type     : '${2:POST}',
    dataType   : '${3:xml/html/script/json}',
    data     : $.param( $('${4:Element or Expression}') ),
    beforeSend : ( xhr ) ->
    xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT")
    return 
    jsonpCallback : '${3:callback function name}'

snippet $ajax
  jqxhr = $.ajax ajaxOptions
      .done   ${2:function}
      .fail   ${3:function}
      .always ${4:function}

snippet $ajaxhtml
  ajaxOptions =
    url    : '${1:mydomain.com/url}'
    type   : 'GET'
    dataType : 'html'
    data   : $.param( $('${2:Element or Expression}') )
    beforeSend :( xhr ) ->
    xhr.setRequestHeader "If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT"
    return
    jsonpCallback : '${3:callback function name}'
  
  jqxhr = $.ajax( ajaxOptions )
    .done ( responseText, textStatus, jqXHR )->
    html = jQuery document.createElement 'div'
         .append jQuery.parseHTML responseText
         .find ${4:selecter}
    return
    .fail   ${5:function}
    .always ${6:function}

snippet $ajaxdfd
  $dfd = $.Deferred()

  ajaxOptions =
  url       : '${1:mydomain.com/url}'
  type      : '${2:POST}'
  dataType    : '${3:xml/html/script/json}'
  data      : $.param( $('${4:Element or Expression}') )
  beforeSend  : ( xhr ) ->
    xhr.setRequestHeader "If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT"
    return
  jsonpCallback : '${3:callback function name}'

  $.ajax ajaxOptions
  .done ( res, status, xhr ) ->
    $dfd.resolve()
    return
  .fail () ->
    $dfd.reject()
    return
  
  return $dfd.promise()

# when
snippet $when
  $.when  ${1:function/object}
  .done   ${2:function}
  .fail   ${3:function}
  .always ${4:function} 

snippet $whent
  $.when ${1:function/object}
  .then ${2:done_function}, ${3:fail_function}

# Deferred
snippet $dfd
  $dfd = $.Deferred()

  $dfd.resolve()
  $dfd.reject()

  return $dfd.promise()

# each
snippet $each
  ${1:jQuery Object}.each index, element ->
    $this = $( element )
    return

# ******************************************
# lodash snippet ***************************

# CreateURL
snippet _.for
  _.forEach ${1:object}, ( value, key, object ) ->
    ${2:script}
    return

snippet _.filter
  _.filter ${1:object}, ( value, key, object ) ->
    ${2:script}
    return

snippet _URL
  @BASE_URL  = '${1:mydomain.com/url}'
  @BASE_OPTION =
    ${2:key} : '${3:value}'
  
  _this = this
  
  @url = this.BASE_URL + '?'
  
  delimiter = ""
  
  _.forEach this.BASE_OPTION, ( value, key, arr ) ->
    _this.url += delimiter + key + '=' + value
    delimiter = '&'
    return
  
  @$tmp = _.template ${4:jQuery Object}

