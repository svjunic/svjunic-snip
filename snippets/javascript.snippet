# ******************************************
# oirano snippet

# ******************************************
# JSDOC ************************************

# file doc
snippet file
    /** 
     * @fileOverview ${1:overview_html}
     * 
     * @author ${2:author}
     * @version ${3:version}
     */
     
# class doc
snippet class
    /**
     * ${1:overview_html}
     * 
     * @class ${2:discription}
     * 
     * @param {${3:type}} ${4:name} ${5:name2}
     * @param {${6:type}} ${7:name} ${8:name2}
     */
 
# member doc
snippet member
    /**
     * ${1:overview_html}
     * @return {${2:type}}
     */

# method doc
snippet method
    /**
     * ${1:overview_html}
     * 
     * @param {${2:type}} ${3:name} ${4:name2}
     * @param {String} sep 分割表示用マーク
     * @return {String} 表示用文章
     * 
     * @example 
     * tiger.toString("：");
     * 出力：「虎太郎：オス」
     * 
     */

# ******************************************
# javascrip snippet ************************

# utility 
snippet vth
    var _this = this;

# Math
snippet Mf
  Math.floor(${1:切り捨てる Number})

snippet Mc
  Math.ceil(${1:四捨五入 Number})

snippet Mr
  Math.round(${1:切り上げ Number})

snippet Ma
  Math.abs(${1:絶対値 Number})

# function
snippet func
    (function( window, document, $ ) {
      ${1:script}
    })( window, document, jQuery );

# format
snippet formatz
  /**
   * @param  {number} num  number or string
   * @param  {number} n    number of characters
   * @return {string} (In an error, 'false' is returned. )
   */
  fncZeroFormat = function(num, n) {
    var target_string;
    switch (typeof num) {
      case 'string' : target_string = num;
                      break;
      case 'number' : target_string = num.toString();
                      break;
      default       : return false;
    }
    while(target_string.length < n){
      target_string = "0" + target_string;
    }
    return target_string;
  };



# ******************************************
# requirejs snippet ***************************

snippet requirejs
  var shim = {         
    '${1:plugin_extension}': {
      deps: ['jquery'],
      exports: '$'
    }
  };

  var paths = {
    '${2:extension}':'${3:path}',
  };

  var ${4:context} = require.config({
    shim        : shim,
    waitSeconds : ${5:number},
    paths       : paths,
    context     : '${6:context}'
  });

  ${7:context}( ['${8:extension}'], function( ${9:export_variable} ){
    ${9:export_variable}.initialize();
  });

# ******************************************
# jQuery snippet ***************************

#ajax
snippet ajaxo
  var ajaxOptions = {
      url      : '${1:mydomain.com/url}',
      type     : '${2:POST}',
      dataType : '${3:xml/html/script/json}',
      data     : $.param( $('${4:Element or Expression}') ),
      beforeSend : function( xhr ) {
       xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
      },
      jsonpCallback : '${3:callback function name}'
  };

snippet $ajax
  var jqxhr = $.ajax( ajaxOptions  )
    .done( ${2:function} )
    .fail( ${3:function} )
    .always( ${4:function} );

# when 
snippet $when
  $.when( ${1:function/object})
    .done( ${2:function} )
    .fail( ${3:function} )
    .always( ${4:function} );

snippet $whent
  $.when( ${1:function/object})
    .then( ${2:done_function}, ${3:fail_function} );

# Deferred
snippet $dfd
    var ajaxOptions = {
        url      : '${1:mydomain.com/url}',
        type     : '${2:POST}',
        dataType : '${3:xml/html/script/json}',
        data     : $.param( $('${4:Element or Expression}') ),
        beforeSend : function( xhr ) {
         xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
        },
        jsonpCallback : '${3:callback function name}'
    };

    $.ajax( ajaxOptions ).done( function ( res, status, xhr ) {
        $dfd.resolve();
    }).fail(function () {
        $dfd.reject();
    });

    return $dfd.promise();

snippet $dfdv
    var $dfd = $.Deferred();

    var ajaxOptions = {
        url      : '${1:mydomain.com/url}',
        type     : '${2:POST}',
        dataType : '${3:xml/html/script/json}',
        data     : $.param( $('${4:Element or Expression}') ),
        beforeSend : function( xhr ) {
         xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
        },
        jsonpCallback : '${3:callback function name}'
    };

    $.ajax( ajaxOptions ).done( function ( res, status, xhr ) {
        $dfd.resolve();
    }).fail(function () {
        $dfd.reject();
    });

    return $dfd.promise();

# ******************************************
# lodash snippet ***************************

# CreateURL
snippet _.for
    _.forEach( ${1:object}, function ( value, key, object ) {
      ${2:script}
    });


snippet _URL
    this.BASE_URL = '${1:mydomain.com/url}';
    this.BASE_OPTION = {
      ${2:key} : '${3:value}'
    };

    this.url = this.BASE_URL + '?';

    var delimiter = "";
    _.forEach( this.BASE_OPTION, function ( value, key, arr ) {
      _this.url += delimiter + key + '=' + value;
      delimiter = '&';
    });

this.$tmp = _.template( ${4:jQuery Object} );



