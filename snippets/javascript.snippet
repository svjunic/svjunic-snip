# ******************************************
# oirano snippet

# ******************************************
# JSDOC ************************************

# file doc
snippet docfile
    /**
     * @fileOverview ${1:overview_html}
     *
     * @author ${2:author}
     * @version ${3:version}
     */

# class doc
snippet docclass
    /**
     * ${1:overview_html}
     *
     * @class ${2:discription}
     *
     * @param {${3:type}} ${4:name} ${5:name2}
     * @param {${6:type}} ${7:name} ${8:name2}
     */

# member doc
snippet docmember
    /**
     * ${1:overview_html}
     * @member {${2:type}}
     */

# method doc
snippet docmethod
    /**
     * ${1:overview_html}
     *
     * @param {${2:type}} ${3:name} ${4:name2}
     * @param {String} sep 分割表示用マーク
     * @return {String} 表示用文章
     *
     * @example
     * tiger.toString("：");
     * 出力：「虎太郎：オス」
     *
     */

# ******************************************
# javascript snippet ************************

# utility
snippet vth
    var _this = this;

snippet isIE6
  var isIE6 = ( window.navigator.appVersion.toLowerCase().indexOf("msie 6.") !== -1 );

snippet isIE7
  var isIE7 = ( window.navigator.appVersion.toLowerCase().indexOf("msie 7.") !== -1 );

snippet isIE8
  var isIE8 = ( window.navigator.appVersion.toLowerCase().indexOf("msie 8.") !== -1 );

snippet isAndroid
  var isAndroid = /Android/.test( window.navigator.userAgent );

snippet isAndroid2
  var isAndroid2 = /Android 2/.test( window.navigator.userAgent );

snippet isAndroid4
  var isAndroid4, isAndroid4Default, isAndroid4Chrome;
  isAndroid4        = false;
  isAndroid4Default = false;
  isAndroid4Chrome  = false;
  isAndroid4 = /Android 4/.test( window.navigator.userAgent );
  if( isAndroid4 && /Android 4.*Version/.test( window.navigator.userAgent ) ){
    isAndroid4Default = true;
  } else {
    isAndroid4Chrome = true;
  }

snippet isIOS
  var isIOS = /(iPad|iPhone|iPod)/g.test( navigator.userAgent );

# class(クロージャ。Singleton向け)
snippet class
  ${1:ClassName}.create = function () {

    var app = {
      ${5:MemberName} : this.${6:VariableData}
    };

    app.initialize = function () {
      ${7:script}
    };

    return app;
  };

# classs(prototype。ちゃんと作るとき向け）
snippet classs
  var ${1:ClassName} = {
    ${2:MemberName} : ${3:VariableData}
  };

  ${1:ClassName}.create = function () {

    var app = function(){};

    app.prototype = {
      ${5:MemberName} : this.${6:VariableData}
    };

    app.prototype.initialize = function () {
      ${7:script}
    };

    var Create = function () {
      var SelectBox = function(){};
      SelectBox.prototype = app.prototype;
      return new SelectBox();
    };

    /* exports */
    var AppPackage = {};
    AppPackage.superClass  = app;
    AppPackage.create = Create;
  };

# width
snippet ww
  // 画面幅
  var ${1:screenWidth} = screen.width;

snippet www
  // 有効画面幅
  var ${1:screenAvailWidth} = screen.availWidth;

snippet wwww
  // 表示領域幅
  var ${1:windowInnerWidth} = window.innerWidth;

snippet wwwww
  // ウィンドウ幅
  var ${1:windowOuterWidth} = window.outerWidth;

snippet wwwwww
  // 表示領域幅
  var ${1:clientWidth} = document.documentElement.clientWidth;

snippet jw
  // 表示領域幅
  var ${1:windowWidth} = $(window).width();

snippet jww
  // ドキュメント幅
  var ${1:documentWidth} = $(document).width();

snippet hh
  // 画面高
  var ${1:screenHeight} = screen.height;

snippet hhh
  // 有効画面高
  var ${1:screenAvailHeight} = screen.availHeight;

snippet hhhh
  // 表示領域高
  var ${1:windowInnerHeight} = window.innerHeight;

snippet hhhhh
  // ウィンドウ高
  var ${1:windowOuterHeight} = window.outerHeight;

snippet hhhhhh
  // 表示領域高
  var ${1:clientHeight} = document.documentElement.clientHeight;


snippet jh
  // 表示領域高
  var ${1:windowHeight} = $(window).height();

snippet jhh
  // ドキュメント高
  var ${1:documentHeight} = $(document).height();

# Math
snippet Mf
  Math.floor(${1:切り捨てる Number})

snippet Mc
  Math.ceil(${1:切り上げ Number})

snippet Mr
  Math.round(${1:四捨五入 Number})

snippet Ma
  Math.abs(${1:絶対値 Number})

# function
snippet func
    (function( window, document, $ ) {
      ${1:script}
    })( window, document, jQuery );

# format
snippet formatz
  /**
   * @param  {number} num  number or string
   * @param  {number} n    number of characters
   * @return {string} (In an error, 'false' is returned. )
   */
  fncZeroFormat = function(num, n) {
    var target_string;
    switch (typeof num) {
      case 'string' : target_string = num;
                      break;
      case 'number' : target_string = num.toString();
                      break;
      default       : return false;
    }
    while(target_string.length < n){
      target_string = "0" + target_string;
    }
    return target_string;
  };



# ******************************************
# requirejs snippet ***************************

snippet requirejs
  var shim = {
    '${1:plugin_extension}': {
      deps: ['jquery'],
      exports: '$'
    }
  };

  var paths = {
    '${2:extension}':'${3:path}',
  };

  var ${4:context} = require.config({
    shim        : shim,
    waitSeconds : ${5:number},
    paths       : paths,
    context     : '${6:context}'
  });

  ${7:context}( ['${8:extension}'], function( ${9:export_variable} ){
    ${9:export_variable}.initialize();
  });

# ******************************************
# jQuery snippet ***************************

#ajax
snippet ajaxo
  var ajaxOptions = {
      url      : '${1:mydomain.com/url}',
      type     : '${2:POST}',
      dataType : '${3:xml/html/script/json}',
      data     : $.param( $('${4:Element or Expression}') ),
      beforeSend : function( xhr ) {
       xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
      },
      jsonpCallback : '${3:callback function name}'
  };

snippet $ajax
  var jqxhr = $.ajax( ajaxOptions  )
    .done( ${2:function} )
    .fail( ${3:function} )
    .always( ${4:function} );

snippet $ajaxhtml
  var ajaxOptions = {
      url      : '${1:mydomain.com/url}',
      type     : 'GET',
      dataType : 'html',
      data     : $.param( $('${2:Element or Expression}') ),
      beforeSend : function( xhr ) {
       xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
      },
      jsonpCallback : '${3:callback function name}'
  };

  var jqxhr = $.ajax( ajaxOptions )
    .done( function( responseText, textStatus, jqXHR ){
      var html = jQuery(document.createElement('div')).append( jQuery.parseHTML( responseText ) ).find( ${4:selecter} )
    })
    .fail( ${5:function} )
    .always( ${6:function} );

snippet $ajaxdfd
    var $dfd = $.Deferred();

    var ajaxOptions = {
        url      : '${1:mydomain.com/url}',
        type     : '${2:POST}',
        dataType : '${3:xml/html/script/json}',
        data     : $.param( $('${4:Element or Expression}') ),
        beforeSend : function( xhr ) {
         xhr.setRequestHeader("If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT");
        },
        jsonpCallback : '${3:callback function name}'
    };

    $.ajax( ajaxOptions ).done( function ( res, status, xhr ) {
        $dfd.resolve();
    }).fail(function () {
        $dfd.reject();
    });

    return $dfd.promise();

# when
snippet $when
  $.when( ${1:function/object})
    .done( ${2:function} )
    .fail( ${3:function} )
    .always( ${4:function} );

snippet $whent
  $.when( ${1:function/object})
    .then( ${2:done_function}, ${3:fail_function} );

# Deferred
snippet $dfd
    var $dfd = $.Deferred();

    $dfd.resolve();
    $dfd.reject();

    return $dfd.promise();

# each
snippet $each
    ${1:jQuery Object}.each( function( index, element ) {
        var $this = $( element );
        ${2:script}
    });

# ******************************************
# lodash snippet ***************************

# CreateURL
snippet _.for
    _.forEach( ${1:object}, function ( value, key, object ) {
      ${2:script}
    });

snippet _.filter
    _.filter( ${1:object}, function ( value, key, object ) {
      return ${2:script}
    });

snippet _.map
    _.map( ${1:object}, function ( value, key, object ) {
      return ${2:script}
    });

snippet _URL
    this.BASE_URL = '${1:mydomain.com/url}';
    this.BASE_OPTION = {
      ${2:key} : '${3:value}'
    };

    this.url = this.BASE_URL + '?';

    var delimiter = "";
    _.forEach( this.BASE_OPTION, function ( value, key, arr ) {
      _this.url += delimiter + key + '=' + value;
      delimiter = '&';
    });

  this.$tmp = _.template( ${4:jQuery Object} );




#  // 画面幅
#  screen.width
#  // 画面高
#  screen.height
#  // 有効画面幅
#  screen.availWidth
#  // 有効画面高
#  screen.availHeight
#  // 表示領域幅
#  window.innerWidth
#  // 表示領域高
#  window.innerHeight
#  // ウィンドウ幅
#  window.outerWidth
#  // ウィンドウ高
#  window.outerHeight
#  // 表示領域幅
#  $(window).width()
#  // 表示領域高
#  $(window).height()
#  // 表示領域幅
#  document.documentElement.clientWidth
#  // 表示領域高
#  document.documentElement.clientHeight
#  // ドキュメント幅
#  $(document).width()
#  // ドキュメント高
#  $(document).height()

