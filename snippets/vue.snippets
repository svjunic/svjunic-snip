# https://github.com/Shougo/neosnippet-snippets/blob/master/neosnippets/vue.snip

snippet   scaffold
<template>
  ${0}
</template>

<script>
export default {
}
</script>

<style>

</style>

snippet   template_with_html
<template>
  ${0}
</template>

snippet   template_with_pug
<template lang="pug">
  ${0}
</template>

snippet   script_with_JavaScript
<script>
export default {
  ${0}
}
</script>

snippet   script_with_TypeScript
<script lang="ts">
import Vue from 'vue'
export default Vue.extend({
  ${0}
})
</script>

snippet   style_with_CSS
<style>
${0}
</style>

snippet   style_with_CSS_scoped
<style scoped>
${0}
</style>

snippet   style_with_scss
<style lang="scss">
${0}
</style>

snippet   style_with_scss_scoped
<style lang="scss" scoped>
${0}
</style>

snippet   style_with_less
<style lang="less">
${0}
</style>

snippet   style_with_less_scoped
<style lang="less" scoped>
${0}
</style>

snippet   style_with_sass
<style lang="sass">
${0}
</style>

snippet   style_with_sass_scoped
<style lang="sass" scoped>
${0}
</style>

snippet   style_with_postcss
<style lang="postcss">
${0}
</style>

snippet   style_with_postcss_scoped
<style lang="postcss" scoped>
${0}
</style>

snippet   style_with_stylus
<style lang="stylus">
${0}
</style>

snippet   style_with_stylus_scoped
<style lang="stylus" scoped>
${0}
</style>

# ******************************************
# ここからJSと同じ
# oirano snippet

# ******************************************
# ES5,ES6 snippet **************************
snippet class1
/**
 * ${1:html_overview}
 * @class
 * @classdesc ${2:description}
 */
export default class $2 {
  /** @constructs */
  constructor (){
    ${0}
  }
}

snippet class2
/**
 * ${1:html_overview}
 * @class
 * @classdesc ${2:description}
 * @extends ${3:extends_class}
 */
export default class $2 extends $3 {
  /**
   * コンストラクタ
   * @constructs
   * @param {${4:variable}} ${5:variableName} ${6:variableDiscription}
   */
  constructor ($5){
    super();
    ${0}
  }
}

# export
snippet export_es2015_1
export ${1:variable or func or etc..};

snippet export_es2015_2
export {${1:variable or func or etc..}};

snippet export_default_es2015_1
export default ${1:variable or func or etc..};

snippet export_default_es2015_2
export default {${1:variable or func or etc..}};

snippet public_method
/**
 * ${1:method_overview}
 * ${2:@param, @return}
 */
${4:method_name} (${5:param}){
  ${0}
}

snippet handle_method
/**
 * ${1:method_overview}
 * @param {Event} e イベントオブジェクト
 */
handle${2:method_name} (e){
  ${0}
}

snippet static_method
/**
 * ${1:method_overview}
 * ${2:@param, @return}
 */
static $4 (${5:param}){
  ${0}
}

# function
snippet func_es2015
function ${1:functionName}(${2:variable or variable=defaultValue}) {
  ${0}
}

snippet func_es2015_2
function ${1:functionName}({${2:variable or variable=defaultValue}}) {
  ${0}
}

# arrow function
snippet func_arrow
(${1:VariableData}) => {
  ${0}
}

# getter
snippet get-normal
get ${1:methodName} (){
  ${0}
}

snippet get-static
/**
 * ${1:method_overview}
 */
static get ${3:methodName} (${4:param}){
  ${0}
}

# setter
snippet set-normal
set ${3:MethodName} (${4:param}){
  ${0}
}

snippet set-static
/**
 * ${1:method_overview}
 * ${2:@param, @return}
 */
static set ${3:methodName} (${4:param}){
  ${0}
}

# import
snippet import_es2015_1
import ${2:variable} from '${1:module}';
${0}

snippet import_es2015_2
import * as name from '${1:module}';
${0}

# dynamic import
snippet import_dynamic_1_webpack
const { default: ${1:name} } = await import( /* webpackChunkName: "${2:/js/index.moge.js}" */ '${2:shared/components/moge.js}' );

snippet import_dynamic_1
const ${1:module} = await import( '${2:shared/components/moge.js}' );

# snippet import_dynamic_2

# console and debugger
snippet cl
console.log(${1:object});

snippet cl2
console.log('${1:string}');

snippet cl3
console.log(`${1} : ${${2:string}}`);

snippet ci
console.info(${1:object});

snippet ce
console.error(${1:object});

snippet ct
console.table(${1:object});

snippet clg
console.group(${1:object});
${2:script}
console.groupEnd($1);

snippet console.groupCollapsed
console.groupCollapsed(${1:object});
${2:script}
console.groupEnd($1);

snippet de
debugger;

# statements
snippet let1
let ${1} = ${2:'$1'};

snippet let2
let [${1}] = [${2:'$1'}];

snippet const1
const ${1} = ${2:'$1'};

snippet const2
const [${1}] = [${2:'$1'}];

snippet var1
var ${1} = ${2:'$1'};

snippet var2
var [${1}] = [${2:'$1'}];

# promise
snippet promise1_fullset
${1:PromiseName} = new Promise(function(resolve, reject){
  resolve(${2:VariableData}); 
});

$1.then(function(data) {
  ${3:done}
})
.catch(function(reason) {
  ${4:error or reject}
});

snippet promise2_promise_only
${1:PromiseName} = new Promise(function(resolve, reject){
  resolve(${2:VariableData}); 
});

snippet promise_all
Promise.all(${1:PromiseName}).then(function(value) {
  ${2:done}
})
.catch(function(reason) {
  ${3:error or reject}
});

snippet promise_race
Promise.race(${1:PromiseName}).then(function(value) {
  ${2:script}
});

snippet await_promise_scripting_delay
 await new Promise(function(resolve) {
   setTimeout(() => {
     resolve();
   }, ${1});
 });
 ${0}

snippet map1
map( function ( value, key, object ) {
  return ${2:script}
});
${0}

snippet filter
filter( function ( value, key, object ) {
  return ${2:script}
})
${0}

snippet unique
filter(function (x, i, self) {
  return self.indexOf(x) === i;
})
${0}

snippet isArray
Array.isArray( ${1:variable} )
${0}

# generator
snippet gen_function1
function* ${1}($2) {
  yield ${3};
}
let ${4:generatorName} = $1();

snippet gen_function2_while_sample
function* ${1}($2) {
  let i = 1;
  let num = 1;
  while (true) {
    num += i
    yield num
  }
}
let ${3:generatorName} = $1();

snippet next
${1:generatorName}.next()

# querySelector
snippet querySelector
${1:rootDom}.querySelector('${2:selector}');
${0}

snippet querySelectorAll
${1:rootDom}.querySelectorAll('${2:selector}');
${0}

snippet querySelectorAllEach
Array.prototype.forEach.call(${1:rootDom}.querySelectorAll('${2:selector}'),()=>{
  ${0}
});

# fetch
snippet fetch
fetch('${1:url}').then( res=>{
  console.log( res );
  ${0}
}).catch( err =>{
  console.log(err);
});

snippet fetchFull
fetch('${1:url}',{
  method: '${2:get or post}',
  headers: {
    'content-type': 'application/json',
    ${2:header}
  },
  body: JSON.stringify(${3:request body}),
  credentials: '${3:include, same-origin, omit}',
  chache: '${4:default, bypass, reload, revalidate, force-cache, offline}'
}).then(res => {
   console.log(res.url, res.type, res.status);
   if(res.headers.get('content-type') === 'application/json') {
     res.json().then(json => console.log(json));
    ${0}
   } else {
     // res.arrayBuffer();
     // res.blob();
     res.text().then(text => console.log(text));
   }
}).catch(err => console.error(err));

# object forEach
snippet object_each
Object.keys(${1:object}).forEach((key)=>{
    ${0} = $1[key]}
});

# before/after
snippet before1
insertAdjacentHTML('beforebegin', ${0:node or string});

snippet before2
before(${0:node or string});

snippet after1
insertAdjacentHTML('afterend', ${0:node or string});

snippet after2
after(${0:node or string});

snippet contains
el !== ${1:childElmenet} && el.contains($1)${0}

snippet parseHTML
let parseHTML = function(str) {
  let tmp = document.implementation.createHTMLDocument();
  tmp.body.innerHTML = str;
  return tmp.body.children;
};
parseHTML(${0});

snippet setTimeout1
setTimeout( ()=>{
  ${2}
},${1});
${0}

snippet setTimeout2
setTimeout( function(){
  ${2}
},${1});
${0}

snippet settimeout1-return
const timeid = setTimeout( ()=>{
  ${2}
},${1});
${0}

snippet settimeout2-return
const timeid = setTimeout( function(){
  ${2}
},${1});
${0}

# ******************************************
# ESLint ***********************************
snippet eslint-disable
/* eslint-disable */

snippet eslint-enable
/* eslint-enable */

snippet eslint-disable-line
// eslint-disable-line

snippet eslint-disable-next-line
// eslint-disable-next-line

snippet eslint-debugger
debugger; // eslint-disable-line

snippet eslint-specifying-variable
/* global ${1: var1, var2, var3:writable, var4:readonly, ...} */


# ******************************************
# prettier ***********************************
snippet prettier-ignore
/* prettier-ignore */

snippet prettier-ignore-start
/* prettier-ignore-start */

snippet prettier-ignore-end
/* prettier-ignore-end */


# ******************************************
# javascript snippet(browser ) *************
# width
snippet ww
// 画面幅
var ${1:screenWidth} = screen.width;

snippet www
// 有効画面幅
var ${1:screenAvailWidth} = screen.availWidth;

snippet wwww
// 表示領域幅
var ${1:windowInnerWidth} = window.innerWidth;

snippet wwwww
// ウィンドウ幅
var ${1:windowOuterWidth} = window.outerWidth;

snippet wwwwww
// 表示領域幅
var ${1:clientWidth} = document.documentElement.clientWidth;

snippet jw
// 表示領域幅
var ${1:windowWidth} = $(window).width();

snippet jww
// ドキュメント幅
var ${1:documentWidth} = $(document).width();

snippet hh
// 画面高
var ${1:screenHeight} = screen.height;

snippet hhh
// 有効画面高
var ${1:screenAvailHeight} = screen.availHeight;

snippet hhhh
// 表示領域高
var ${1:windowInnerHeight} = window.innerHeight;

snippet hhhhh
// ウィンドウ高
var ${1:windowOuterHeight} = window.outerHeight;

snippet hhhhhh
// 表示領域高
var ${1:clientHeight} = document.documentElement.clientHeight;


snippet jh
// 表示領域高
var ${1:windowHeight} = $(window).height();

snippet jhh
// ドキュメント高
var ${1:documentHeight} = $(document).height();

# Math
snippet Mathf(切り捨て）
Math.floor(${1:Number})

snippet Mathc(切り上げ)
Math.ceil(${1:Number})

snippet Mathr(四捨五入)
Math.round(${1:Number})

snippet Matha(絶対値)
Math.abs(${1:Number})

# function
snippet func(callback)
function(${1:variable or variable=defaultValue}) {
${2:script}
});

snippet func(closure)
(function( window, document ) {
${1:script}
})( window, document );

snippet func(closure_jquery)
(function( window, document, $ ) {
${1:script}
})( window, document, jQuery );

# native function
snippet forEach
${1:name}.forEach(function(${2:name} ,index,arr){
${3:$script}
});

# native function
snippet some
${1:name}.some(function(${2:name} ,index,arr){
${3:$script}
});

snippet objectKeys
Object.keys(${1:ObjectName}).forEach(function(key,value){
${3:$script}
});

snippet regexpHankakuNumber1
/^\d*$/

snippet regexpHankakuNumber2
/^\d+$/

snippet regexpHankakuAlphabet1
/^[a-zA-Z]*$/

snippet regexpHankakuAlphabet2
/^[a-zA-Z]+$/

snippet regexpHankakuEiSu1
/^[0-9a-zA-Z]*$/

snippet regexpHankakuEiSu2
/^[a-zA-Z0-9!-/:-@¥[-\`{-~]*$/

snippet regexpHankakuLengthX1
/^([a-zA-Z0-9]{${1:number},})$/

snippet regexpHankakuLengthX2
/^([a-zA-Z0-9]{${1:number},${2:number}})$/

snippet regexpNumberLengthX1
/^(\d{0,8})$/

snippet regexpNumberLengthX2
/^\d{8}$/

snippet regexpURL
/^https?:\/\/

snippet regexpPostalCode
/^\d{3}-\d{4}$/

snippet regexpIP
/^\d{1,3}(\.\d{1,3}){3}$/

snippet regexpZenkakuHira
/^[ぁ-んー]*$/

snippet regexpZenkakuKana
/^[ァ-ンヴー]*$/

snippet regexpZenkaku
/^[^\x20-\x7e]*$/




# ******************************************
# javascript snippet(util) *****************
# utility
snippet vthi
var _this = this;

snippet vtha
var _that = this;

snippet vself
var self = this;

snippet isIE
var isIE = (window.navigator.appVersion.match(/MSIE/) || window.navigator.appVersion.match(/Trident/))? true : false;

snippet isIE6
var isIE6 = (window.navigator.appVersion.toLowerCase().indexOf('msie 6.') !== -1)? true : false;

snippet isIE7
var isIE7 = (window.navigator.appVersion.toLowerCase().indexOf('msie 7.') !== -1)? true : false;

snippet isIE8
var isIE8 = (window.navigator.appVersion.toLowerCase().indexOf('msie 8.') !== -1)? true : false;

snippet isIE9
var isIE9 = (window.navigator.appVersion.toLowerCase().indexOf('msie 9.') !== -1)? true : false;

snippet isIE10
var isIE10 = (window.navigator.appVersion.toLowerCase().indexOf('msie 10.') !== -1)? true : false;

snippet isIE11
var isIE11 = (function(){
var appVersion = window.navigator.appVersion;
var isIE = (appVersion.match(/MSIE/) || appVersion.match(/Trident/))? true : false;
var hasRv = (window.navigator.appVersion.toLowerCase().indexOf('rv:11') !== -1)? true : false;
return (isIE && hasRv);
})();

snippet isAndroid
var isAndroid = (/Android/.test(window.navigator.userAgent) && !/Windows Phone/.test(window.navigator.userAgent));

snippet isAndroid2
var isAndroid2 = /Android 2/.test(window.navigator.userAgent);

snippet isAndroid4
var isAndroid4, isAndroid4Default, isAndroid4Chrome;
isAndroid4    = false;
isAndroid4Default = false;
isAndroid4Chrome  = false;
isAndroid4 = /Android 4/.test(window.navigator.userAgent);
if(isAndroid4 && /Android 4.*Version/.test(window.navigator.userAgent)){
isAndroid4Default = true;
} else {
isAndroid4Chrome = true;
}

snippet isIOS
var isIOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);

snippet gtm
dataLayer.push({
'event':'gaTrackEvent',
'gaCategory': '${1:gaCategoryName}',
'gaAction': '${2:gaAction}',
'gaLabel' : '${3:gaLabel}',
'eventTimeout': '${4:time}',
'eventCallback': '${5:function}',
});

# インスタンス生成用の仮想クラス
snippet old_class
${1:ClassName}.create = function () {

var app = {
  ${2:MemberName} : this.${3:VariableData}
};

app.initialize = function () {
  ${3:script}
};

return app;
};

# format
snippet funcZeroPadding
/**
 * 0詰めフォーマット
 * @param  {Number} num  number or string
 * @param  {Number} n  number of characters
 * @return {String} (In an error, 'false' is returned. )
 */
function zeroPadding(num, n) {
  var target_string;
  switch (typeof num) {
    case 'string' : target_string = num;
            break;
    case 'number' : target_string = num.toString();
            break;
    default     : return false;
  }
  while(target_string.length < n){
    target_string = '0' + target_string;
  }
  return target_string;
};

# NumberDelimitter
snippet funcNumberDelimiter
/**
  * 価格の区切り文字を挿入したstringを返す
  * @param {Number} num 数値（interger）
  */
function numberDelimiter(num) {
  // ES2018 まだ早い
  //return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  return num.toLocaleString('ja-JP')
}

# fragment
snippet fragment
  const _fragment = document.createDocumentFragment();

  for(let cnt=0, max=${1:variable}.length; cnt<max; cnt++ ){
      const item = document.createElement('${2:tagname}');
      const text = document.createTextNode('${3:string}');
      item.appendChild(song);
      fragment.appendChild(item); // fragmentの追加する
  }

  ${4:element}.appendChild(fragment);
  ${0}

snippet xmlhttp
var xhr = new XMLHttpRequest();

// ハンドラの登録.
xhr.onreadystatechange = function() {
  switch ( xhr.readyState ) {
    case 0:
      // 未初期化状態.
      console.log( 'uninitialized!' );
      break;
    case 1: // データ送信中.
      console.log( 'loading...' );
      break;
    case 2: // 応答待ち.
      console.log( 'loaded.' );
      break;
    case 3: // データ受信中.
      console.log( 'interactive... '+xhr.responseText.length+' bytes.' );
      break;
    case 4: // データ受信完了.
      if( xhr.status == 200 || xhr.status == 304 ) {
        var data = xhr.responseText; // responseXML もあり
        console.log( 'COMPLETE! :'+data );
      } else {
        console.log( 'Failed. HttpStatus: '+xhr.statusText );
      }
      break;
  }
};

xhr.open( 'POST', 'http://{送信先URL}/post.php', false );
// POST 送信の場合は Content-Type は固定.
xhr.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );
// 
xhr.send( 'hoge=piyo&moge=fuga' );
xhr.abort(); // 再利用する際にも abort() しないと再利用できないらしい.





# ******************************************
# lodash and undersocre snippet ************

# CreateURL
snippet _for
_.forEach( ${1:object}, function ( ${2:value}, key, object ) {
  ${3:script}
});

snippet _filter
_.filter( ${1:object}, function ( value, key, object ) {
  return ${2:script}
});

snippet _map
_.map( ${1:object}, function ( value, key, object ) {
  return ${2:script}
});

snippet _URL
this.BASE_URL = '${1:mydomain.com/url}';
this.BASE_OPTION = {
  ${2:key} : '${3:value}'
};

this.url = this.BASE_URL + '?';

var delimiter = '';
_.forEach( this.BASE_OPTION, function ( value, key, arr ) {
  _this.url += delimiter + key + '=' + value;
  delimiter = '&';
});

this.$tmp = _.template( ${4:jQuery Object} );


# ******************************************
# Vue  *************************************
snippet vue_orthodox
export default function(store, _root) {
  new Vue({
    el: _root,
    data: {
      input: null,
    },

    //インスタンスの生成前に実行, this.dataとかもない
    beforeCreate: function() {
      //console.log('beforeCreate');
    },

    //インスタンスが作成された後で実行, this.$elとかはない
    created: function() {
      //console.log('created, ');
    },

    //elementへのマウント前に実行, this.$elはない
    beforeMount: function() {
      //console.log('beforeMount');
    },

    //elementへのマウントがされた後で実行, this.$elがある
    // - 子コンポーネント全てをマウントしたことは保証されない
    // - サーバサイドレンダリング（SSR）ではうごかない
    mounted: function() {
      //console.log('mounted');
    },

    //データの更新があった時に、rerenderされる前に実行
    beforeUpdate: function() {
      //console.log('beforeUpdate');
    },

    //データの更新があった時に、rerenderされた後に実行
    updated: function() {
      //console.log('updated');
    },

    //$destroy()が呼ばれた後、インスタンスが削除される前に実行
    beforeDestroy: function() {
      //console.log('beforeDestroy');
    },

    //$destroy()が呼ばれた後、インスタンスが削除された後に実行
    destroyed: function() {
      //console.log('destroyed');
    },

    /****************
     * other
     ****************/
    computed: {},
    methods: {
      //onMouseenter: function() {
      //  console.log('mouseenter');
      //  this.mogeta()
      //},
      //mogeta: function() {
      //  console.log('mogeta!');
      //}
    }
  });
}


# ******************************************
# JSDOC ************************************

# file
snippet doc_file-full
/**
 * @file ${1:overview_html}
 * @author ${2:author}
 * @version ${3:version}
 */

# class
snippet doc_class
/**
 * ${1:overview_html}
 * @class
 * @param {${2:type}} ${3:name} ${4:discription}
 */

# member
snippet doc_member
/**
 * ${1:overview_html}
 * @member {${2:type}}
 */

# constructor
snippet doc_constructor
@constructs

# method
snippet doc_method
/**
 * ${1:overview_html}
 *
 * @param {${2:type}} ${3:name} ${4:discription}
 * @return {${5:type}} ${6:name} ${7:discription}
 * @example
 * ${7:example}
 * tiger.toString('：');
 * 出力：「虎太郎：オス」
 */

# method
snippet doc_type
/**
 * ${1:overview_html}
 * @type {${2:type}}
 */

# method function
snippet doc_function
/**
 * ${1:note}
 * @param {${2:type}} ${3:name} ${4:detail}
 */

# jsdoc util
## file
snippet doc_file
@file ${1:name}

## fire
snippet doc_fire
@fire ${1:className}#${1:Event}

## author
snippet doc_a
@author ${1:name}

## class
snippet doc_c
@class ${1:name}

## version
snippet doc_v
@version ${1:version}

## callback
snippet doc_cb
@callback {Boolean} ${1:name} ${2:discription}

## param
snippet doc_pb
@param {Boolean} ${1:name} ${2:discription}

snippet doc_pn
@param {Number} ${1:name} ${2:discription}

snippet doc_ps
@param {String} ${1:name} ${2:discription}

snippet doc_po
@param {Object} ${1:name} ${2:discription}

snippet doc_pe
@param {Event} e ${1:EventObject}

## return
snippet doc_rb
@return {Boolean} ${1:name} ${2:discription}

snippet doc_rn
@return {Number} ${1:name} ${2:discription}

snippet doc_rs
@return {String} ${1:name} ${2:discription}

snippet doc_ro
@return {Object} ${1:name} ${2:discription}




# ******************************************
# jQuery snippet ***************************

#ajax
snippet ajaxo
var ajaxOption = {
  url    : '${1:mydomain.com/url}',
  type   : '${2:POST}',
  dataType : '${3:xml/html/script/json}',
  data   : $.param( $('${4:Element or Expression}') ),
  beforeSend : function( xhr ) {
   xhr.setRequestHeader('If-Modified-Since', 'Thu, 01 Jun 1970 00:00:00 GMT');
  },
  jsonpCallback : '${3:callback function name}'
};

snippet $ajax
var jqxhr = $.ajax( ajaxOption  )
.done( ${2:function} )
.fail( ${3:function} )
.always( ${4:function} );

snippet $ajaxhtml
var ajaxOption = {
  url    : '${1:mydomain.com/url}',
  type   : 'GET',
  dataType : 'html',
  data   : $.param( $('${2:Element or Expression}') ),
  beforeSend : function( xhr ) {
   xhr.setRequestHeader('If-Modified-Since', 'Thu, 01 Jun 1970 00:00:00 GMT');
  },
  jsonpCallback : '${3:callback function name}'
};

var jqxhr = $.ajax( ajaxOption )
.done( function( responseText, textStatus, jqXHR ){
  var html = jQuery(document.createElement('div')).append( jQuery.parseHTML( responseText ) ).find( ${4:selector} )
})
.fail( ${5:function} )
.always( ${6:function} );

snippet $ajaxdfd
var $dfd = $.Deferred();

var ajaxOption = {
  url    : '${1:mydomain.com/url}',
  type   : '${2:POST}',
  dataType : '${3:xml/html/script/json}',
  data   : $.param( $('${4:Element or Expression}') ),
  beforeSend : function( xhr ) {
   xhr.setRequestHeader('If-Modified-Since', 'Thu, 01 Jun 1970 00:00:00 GMT');
  },
  jsonpCallback : '${3:callback function name}'
};

$.ajax( ajaxOption ).done( function ( res, status, xhr ) {
  $dfd.resolve();
}).fail(function () {
  $dfd.reject();
});

return $dfd.promise();

# when
snippet $when
$.when(${1:function/object})
.done(${2:function})
.fail(${3:function})
.always( ${4:function});

snippet $whent
$.when(${1:function/object})
.then(${2:done_function}, ${3:fail_function});

snippet $whenarray
$.when.apply(null, ${1:promsie_array})
.done(${2:function})
.fail(${3:function})
.always( ${4:function});

# Deferred
snippet $dfd
var $dfd = $.Deferred();

$dfd.resolve();
$dfd.reject();

return $dfd.promise();

# each
snippet $each
${1:jQuery Object}.each( function( index, element ) {
  var $this = $( element );
  ${2:script}
});


# # module CommonJS
# snippet vrequire
# options head indent
#   var ${1:name} = require('${2:MoDuleName}');
# 
# snippet cexport1
# options head indent
#   module.exports = ${1:object or function};
# 
# snippet cexport2
# options head indent
#   module.exports = {
#   ${1:name} : ${2:object or function}
#   };
# 
# snippet cexport3
# options head indent
#   exports = {
#   ${1:name} : ${2:object or function}
#   };
# 
# snippet cexportm
# options head indent
#   function ${1:name}(){
#   ${2:script}
#   }
#   module.exports = $1;
#
#
# # module UMD
# snippet module_umd
# options head indent
#   (function(root, definition){
#     // CommonJS
#     if (typeof exports === 'object') {
#     module.exports = definition();
#     // RequireJS
#     } else if (typeof define === 'function' && define.amd) {
#     define(definition);
#     // <script>
#     } else {
#     ${1:ClassName} = definition();
#     }
#   })(this, function(){
#     'use strict';
#   
#     var $1 = {};
# 
#     ${2:functions} 
# 
#     return $1;
#   });


## merge from neosnippets/javascript.snip
snippet :f
${1:#:method_name}: function(${2:#:attribute}) {
  ${0:TARGET}
}

snippet function
function ${1:#:function_name}(${2:#:argument}) {
  ${0:TARGET}
}

snippet function2
function ${1:function_name}(${2:argument}) {
  ${0:TARGET}
}

snippet proto
${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {
  ${0:TARGET}
};


snippet f
function(${1}) { ${0:TARGET} };

snippet if
if (${1:true}) {
  ${0:TARGET}
}

snippet if-else
if (${1:#:condition}) {
  ${2:TARGET}
} else {
  ${3}
}

snippet for
for (let ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
  ${0:TARGET}
}

snippet forin
for (let ${1:i} in ${2:#:Things}) {
  ${0:TARGET}
}

snippet while
while (${1:true}) {
  ${0:TARGET}
}

snippet switch
switch (${1:#:let}) {
  case ${2:#:val}:
    ${0:TARGET}
    break;
}

snippet try
try {
  ${1:TARGET}
} catch (${2:e}) {
  ${3}
}

snippet try_finally
try {
  ${1:TARGET}
} catch (${2:e}) {
  ${3}
} finally {
  ${4}
}


snippet key-value
${1:#:value_name}: ${0:#:value},

#snippet key
#options word
#  ${1:#:key}: "${2:#:value}"}${3:, }

snippet setTimeout-function
setTimeout(function() { ${0} }, ${1:10});

snippet debugger
debugger;

snippet console-log
console.log(${0:TARGET});

snippet console-trace
console.trace();

snippet console-error
console.error(${0:TARGET});

snippet console-warn
console.warn(${0:TARGET});

snippet console-info
console.info(${0:TARGET});

snippet iife
(function(${1}) {
  'use strict';
  ${0:TARGET}
})(${2});

snippet js
JSON.stringify(${1:TARGET}, null, 2);

snippet jsc
console.log(JSON.stringify(${1:TARGET}, null, 2));

snippet     class
class ${1:#:NAME} {
  constructor(${2:#:ARGS}) {
    ${0:TARGET}
  }
}

snippet     class-extends
class ${1:#:NAME} extends ${2:#:SuperClass} {
  constructor(${3:#:ARGS}) {
    ${0:TARGET}
  }
}

snippet     static
static ${1:#:NAME}(${2:#:ARGS}) {
  ${0:TARGET}
}

snippet     set
set ${1:#:NAME}(${2:#:ARGS}) {
  ${0:TARGET}
}

snippet     get
get ${1:#:NAME}() {
  ${0:TARGET}
}

snippet     import
import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import-default
import ${1:defaultMember} from "${0:TARGET}";

snippet     import-all
import * as ${1:NAME} from "${0:TARGET}";

snippet     import-default-member
import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";


